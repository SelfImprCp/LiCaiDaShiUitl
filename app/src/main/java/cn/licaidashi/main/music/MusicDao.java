package cn.licaidashi.main.music;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.cp.mylibrary.utils.StringUtils;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "SystemMessage".
 */
public class MusicDao extends AbstractDao<Music, Long> {

    public static final String TABLENAME = "SystemMessage";

    /**
     * Properties of entity Music.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property Title = new Property(1, String.class, "title", false, "title");
        public final static Property Path = new Property(2, String.class, "path", false, "path");

    }


    public MusicDao(DaoConfig config) {
        super(config);
    }

    public MusicDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"SystemMessage\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id

                "\"title\" TEXT," + // 3: title

                "\"path\" TEXT NOT NULL );"); // 11: fileSize
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SystemMessage\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Music entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(3, path);
        }

    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Music entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(3, path);
        }

    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public Music readEntity(Cursor cursor, int offset) {
        Music entity = new Music( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.getString(offset + 1), // type
                cursor.getString(offset + 2) ,100 );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, Music entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0)  );
//
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));

        entity.setPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));

    }

    @Override
    protected final Long updateKeyAfterInsert(Music entity, long rowId) {
        entity.setId(rowId  );
        return rowId;
    }

    @Override
    public Long getKey(Music entity) {
        if (entity != null) {
            return  entity.getId() ;
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Music entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}
